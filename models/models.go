// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TabType string

const (
	TabTypeTerminal TabType = "TERMINAL"
	TabTypeEditor   TabType = "EDITOR"
	TabTypeService  TabType = "SERVICE"
	TabTypeExternal TabType = "EXTERNAL"
)

func (e TabType) IsValid() bool {
	switch e {
	case TabTypeTerminal, TabTypeEditor, TabTypeService, TabTypeExternal:
		return true
	}
	return false
}

func (e TabType) String() string {
	return string(e)
}

func (e *TabType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TabType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TabType", str)
	}
	return nil
}

func (e TabType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
