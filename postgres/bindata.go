// Code generated by go-bindata.
// sources:
// schema/00_unique_id.down.sql
// schema/00_unique_id.up.sql
// schema/01_create_table_tracks.down.sql
// schema/01_create_table_tracks.up.sql
// schema/02_create_table_challenges.up.sql
// schema/02_create_table_challengs.down.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __00_unique_idDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x70\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\x2a\x48\x4f\x2e\xaa\x2c\x28\xc9\x57\xb2\xe6\x02\x2b\x72\x0b\xf5\x73\x0e\x41\x55\x53\x9a\x97\x59\x58\x9a\x1a\x5f\x9c\x91\x5f\x54\x12\x9f\x99\x62\xcd\x05\x08\x00\x00\xff\xff\xe6\x96\x38\x0d\x4e\x00\x00\x00")

func _00_unique_idDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__00_unique_idDownSql,
		"00_unique_id.down.sql",
	)
}

func _00_unique_idDownSql() (*asset, error) {
	bytes, err := _00_unique_idDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "00_unique_id.down.sql", size: 78, mode: os.FileMode(420), modTime: time.Unix(1544457854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __00_unique_idUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x6f\xe2\x38\x10\xfd\x9e\x5f\xf1\x54\x55\x0a\xe8\x80\x93\x4e\xa7\x93\x6e\x51\x3f\xb0\xe0\x76\x91\xd8\xb0\x0a\xa9\xda\x6f\xc8\x24\x43\x62\xd5\xb5\xa9\xed\x94\x8d\xb4\x3f\xfe\x34\x0e\x14\x76\xa5\xdb\x0f\x55\x01\xcf\x7b\x33\x9e\xf7\x66\x3c\x1e\x43\x18\xb9\xd3\x84\xd2\x75\x87\x60\x41\xdf\x03\x19\xaf\xac\x49\xe6\xb9\x98\x15\x02\xe2\xb9\x10\xd9\x66\xb9\xce\xb0\xbc\x47\xb6\x2e\x20\x9e\x97\x9b\x62\x83\x9b\x43\xdd\x43\x6e\xa6\x49\x32\x1e\x63\xee\x48\x06\x82\x44\x70\xaa\xae\xc9\x61\xdf\x9a\x32\x28\x6b\x10\x1a\x19\x10\xe4\x0b\x79\x18\x0b\xe9\xea\xf6\x95\x4c\xf0\x13\x46\x15\xbf\x04\x7b\xc8\x36\xd8\x57\x19\x54\x29\xb5\xee\xd0\xc8\x77\xc2\x7a\xb5\x18\x21\x13\x4f\x70\x54\x5a\x57\x79\x06\x4a\x53\xa1\x78\xd8\x16\xb3\xcf\x2b\xb1\xcd\x66\x5f\x05\xa4\xc7\x91\xb4\xe6\xff\x36\x34\xe4\xfc\xe4\x7c\x85\x75\x8e\x5c\x7c\x5b\xcd\xe6\x02\xf7\x8f\xd9\xbc\xe0\xcb\xb4\x46\xbd\xb5\xb4\xf5\x8d\x75\x61\xab\xaa\xc1\x30\xc9\x45\xf1\x98\x67\x1b\x14\xf9\xf2\xe1\x41\xe4\x98\x6d\x70\x7b\x9b\x24\x18\x8f\xb1\xa0\x52\x4b\x47\x08\x0d\xe1\x5d\x3a\xc5\x0d\xe3\x6c\xa9\xd6\xd8\x11\x5a\xaf\x4c\x3d\x49\x16\x62\xbe\x9a\xe5\x22\x01\x5e\xa8\x43\x21\x9e\x8b\x69\x02\xbc\xb9\xcb\xe7\xbd\x6d\xb9\xec\xf8\xed\xb3\x78\x58\x66\x09\x98\xbe\x26\x43\x8e\x9b\xc7\xfc\x7b\xe5\x7c\xc0\x41\xba\x00\xbb\x87\xc4\x5b\x4b\xae\xe3\x4b\x49\xf8\xe0\x94\xa9\x71\x54\xa1\x81\x97\x7b\xd2\x5d\x8f\x27\x5f\xca\x03\x55\x08\x51\x48\x23\x5f\x69\xd4\xd7\x84\x1f\x3f\x10\x2c\x4a\x6b\x4a\x96\xa0\xa1\xc8\xeb\x4f\x55\x7d\xba\x43\xba\x11\x2b\x31\x2f\xa0\x2a\xdc\xe7\xeb\xaf\x48\x19\xf1\xd6\xda\x40\x5b\x55\x91\x09\x83\x9f\x5a\x3c\xe4\xd3\x14\x4f\x5f\x44\x2e\xa0\xaa\xbb\x74\x9a\xf4\x05\x14\x8d\xf2\xd0\xd6\x1e\x70\x54\x5a\xe3\xe0\xec\x4e\xee\x74\x07\x6b\x74\x07\xd7\x1a\x58\x53\x12\x0e\xe4\xc0\xaa\xa2\x35\x41\x69\x6e\xdf\x3b\x7d\xdc\xbd\xea\x99\x5e\x95\xd6\xd1\x06\x76\x0f\x55\xf9\x49\x02\xac\xd6\xeb\x6f\x09\x10\x8f\x1f\xce\x9d\xb2\xad\x3b\xb7\x63\xd7\x05\xf2\xd1\x0f\x8e\xc6\x64\x4a\x5b\x51\xdf\xae\x9d\xf4\xf4\xcf\xdf\xa7\xb0\x49\xa4\x60\x61\x3e\xdd\x41\xdb\x23\xb9\x41\x1f\x3b\xa8\xc9\x6c\x9d\x34\x95\x7d\xdd\x46\xaa\xc1\xbf\xc3\x11\xd2\x1e\x9c\x0e\x87\xf1\x8e\x31\xf9\xe7\x9e\x2f\xc2\x38\x71\x69\x4d\x90\xca\x78\xfc\x85\xc7\x7c\x85\xd6\xb0\x26\x28\x1b\xe9\x64\x19\xc8\x79\xec\x3a\x54\xb4\x97\xad\x0e\x93\x33\x47\xd1\x10\x07\x8f\x63\xe8\x3b\x39\x9e\x34\x34\xd2\xb3\x38\x9e\xe0\xe8\xa0\x65\x49\xa7\xf9\xb8\xaa\xf8\x74\x30\x78\xa1\x6e\x84\xf4\xcf\x74\x84\xf4\x7b\x3a\x9c\x32\x65\xeb\x74\x74\xc3\x35\xf8\xff\xa1\x7f\x30\xb4\xfb\x1d\xf4\x5c\xea\xfc\xe2\x9a\x0f\x91\x22\xe7\xa0\xf7\x5e\xef\x93\x6a\xd8\xfb\xf1\xe7\xb0\x68\xda\x33\x51\x94\xa6\x35\x50\x97\x36\xfc\x62\xbb\x9b\x40\x3e\xdc\x5c\x19\x6b\xa7\x65\xc3\x7f\x29\x96\x59\xb1\xee\xe7\xe6\x8c\xcd\xec\x11\x37\xf1\x97\x9b\xde\x6e\xbb\x7e\x70\xaa\xf6\xa0\x55\x19\xd3\xab\x0a\xd6\x21\x7b\x5c\xad\xfa\x8c\xe2\x59\xcc\x1f\x0b\x11\x5d\xff\x61\x70\xad\x02\x39\xa9\xb9\x2f\xc3\xab\x34\x17\xbd\xe7\x0d\x95\x2f\x3c\x3f\x9e\x08\x6a\x7f\x9a\x5e\xe5\xaf\x88\xc7\x63\x2c\xf7\x38\xb2\xea\x54\xbe\xf0\x08\xfe\x12\x7d\x17\x83\xa1\x02\x8e\xb6\xd5\x15\xa4\x3e\xca\xce\x73\xc9\xf7\xb3\xd5\x46\x9c\x49\x76\x54\xca\xd6\x13\x06\x31\xba\x07\x0d\x39\xd5\x29\x3e\x06\xf7\x29\x97\xf7\x27\xea\xe5\xa6\xe7\x2e\xbe\x88\x2c\x9e\x5c\x95\x53\xa9\xca\xa4\x01\x7b\x65\x2a\x48\x94\x56\x6b\xe5\xfb\x55\x4c\x06\x9a\x78\xa9\x72\xcb\x78\xb4\x26\x27\xac\x78\x5e\xc6\x1d\x05\x88\x6c\x81\xe5\xfd\xa5\x0f\x4f\x14\xd7\x30\x13\x72\x10\x55\xe8\x28\x8c\xe0\x2d\x1c\x85\xd6\x19\xbe\x34\xb3\x05\x7b\xe0\xb1\x3d\x13\x5f\xcb\x1f\x78\x85\xd5\x52\x19\xce\xc6\xfc\x1c\x70\xde\x1e\xbc\xd9\x39\x68\xbd\x5a\x80\xb7\xac\x7c\x97\x4a\xc7\x55\xa6\xcc\xc7\x36\xfe\x96\xaf\xe7\x62\xf1\x98\x8b\xcd\xe4\x82\x52\x71\x6e\xf0\xda\x86\x28\xbb\xb3\xc7\xfe\xb1\x89\xb6\x90\x65\x68\xe3\x1b\xb2\x23\x2c\xb3\x8d\xc8\x0b\xaa\x4e\xd8\x27\x4a\xdd\xd9\xf4\x3c\xc9\xaa\x1a\xc1\x51\x2d\x5d\xa5\xc9\xc7\xdd\x73\x64\x1a\x56\x4d\xb2\x58\x7b\xeb\xa8\x47\x46\xaf\xf3\xf2\xe1\x41\x38\x3f\x05\xcc\x9a\x89\xa7\x89\x62\xbd\x5f\xa8\xbb\xac\x45\x42\x2e\xe6\xeb\x7c\x71\xea\x14\x55\x68\xc8\x11\xd7\x7d\xfc\x6d\x9d\xa3\x9e\xc0\xba\x3e\x8e\x2f\x69\xe8\x7b\xf8\x78\x5b\x23\xb0\xa6\xc0\x46\x0b\x67\x4a\x6b\x62\x25\xfd\x3b\xc6\x05\x4d\x13\x91\x2d\xa6\xc9\xed\x2d\xb4\x34\x75\x2b\x6b\x42\x7a\xd0\x87\xda\xbf\xe9\x74\xfa\x5f\x00\x00\x00\xff\xff\xf5\x75\x09\x33\xfa\x07\x00\x00")

func _00_unique_idUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__00_unique_idUpSql,
		"00_unique_id.up.sql",
	)
}

func _00_unique_idUpSql() (*asset, error) {
	bytes, err := _00_unique_idUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "00_unique_id.up.sql", size: 2042, mode: os.FileMode(420), modTime: time.Unix(1544457844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_create_table_tracksDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x29\x4a\x4c\xce\x2e\xb6\xe6\xe2\x82\x88\x05\x79\xba\xbb\xbb\x06\x29\x94\x14\x65\xa6\xa7\xa7\x16\xc5\x43\x64\xe3\xd3\x53\xf3\x32\x53\x14\xfc\xfd\x60\xaa\x01\x01\x00\x00\xff\xff\xae\xcc\x6b\x77\x40\x00\x00\x00")

func _01_create_table_tracksDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_create_table_tracksDownSql,
		"01_create_table_tracks.down.sql",
	)
}

func _01_create_table_tracksDownSql() (*asset, error) {
	bytes, err := _01_create_table_tracksDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_create_table_tracks.down.sql", size: 64, mode: os.FileMode(420), modTime: time.Unix(1544515697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_create_table_tracksUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x4b\xf4\x30\x10\xc6\xf1\x7b\x3e\xc5\x73\x6c\xe1\x3d\xbc\x08\x7b\xda\x53\x9a\x9d\x76\x83\x35\x59\xc6\x54\x77\x4f\x65\xd9\x86\x1a\x2c\x5d\x4d\xd2\xef\x2f\x22\x45\x11\x44\xe7\x3a\xbf\xcb\xf3\x57\x4c\xd2\x11\x9c\xac\x5a\x42\x8e\xe7\xcb\x73\x42\x21\x80\x30\xe0\xcb\x3d\x48\x56\x7b\xc9\xc5\xcd\x66\x53\xe2\xc0\xfa\x4e\xf2\x09\xb7\x74\xfa\x27\x80\x34\x2d\xe3\x0f\xd2\x58\x07\xd3\xb5\xed\x3b\xcb\x21\x4f\xfe\x0f\xcc\x9f\x93\x8f\xbf\xb2\xc1\xa7\x4b\x0c\x2f\x39\x5c\x67\x00\x8e\x8e\xee\xdb\x7b\xf2\xd9\xaf\x13\x2a\xdd\x68\xf3\x09\xb0\xa3\x5a\x76\xad\xc3\x7f\x51\x6e\x85\x58\x0b\xb0\x6e\x1a\x62\xe4\x18\xc6\xd1\xc7\xfe\xa3\x45\x3f\xfa\x39\x0c\xa8\xa8\xb6\x4c\xd0\xe6\x9e\xd8\xc1\x9a\xb5\x54\x6d\x19\x24\xd5\x1e\x6c\x1f\x41\x47\x52\x9d\x23\x1c\xd8\x2a\xda\x75\x4c\x58\xe6\xf0\xba\xf8\x3e\x3d\x5d\x63\xee\xc3\x50\x94\xdb\xb7\x00\x00\x00\xff\xff\x45\xd5\x09\xdf\x6f\x01\x00\x00")

func _01_create_table_tracksUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_create_table_tracksUpSql,
		"01_create_table_tracks.up.sql",
	)
}

func _01_create_table_tracksUpSql() (*asset, error) {
	bytes, err := _01_create_table_tracksUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_create_table_tracks.up.sql", size: 367, mode: os.FileMode(420), modTime: time.Unix(1544458601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_create_table_challengesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xc1\x4e\xc2\x40\x10\x06\xe0\x7b\x9f\x62\x6e\x40\xe2\x81\x68\x38\x71\x5a\xca\x50\x1a\x6b\x97\x8c\x5b\x85\x53\x53\xdb\x61\x99\x64\x5b\x63\x77\x7b\xf0\xed\x0d\x18\x22\x46\x89\xee\x75\xbf\xfc\x33\xf9\x27\x26\x54\x06\xc1\xa8\x45\x86\x50\x1f\x2a\xe7\xb8\xb3\xec\x61\x1c\x01\x48\x03\x17\xef\x49\x51\xbc\x56\x34\xbe\x9d\xcd\x26\xb0\xa1\xf4\x41\xd1\x0e\xee\x71\x77\x13\x01\x78\x37\xd8\x2b\x32\xd7\x06\xf2\x22\xcb\x8e\x2c\x48\x70\xfc\x0f\xc6\x95\xe7\xfe\x4f\x56\x79\x2f\xb6\x6b\xb9\x0b\x47\x66\x70\x6b\xbe\x7d\x37\xb2\xdf\x4b\x3d\xb8\xf0\x7e\x35\x05\x96\xb8\x52\x45\x66\x60\xf4\x52\x79\xa9\x47\x9f\x3b\xb6\xec\xa4\x95\x53\x28\xa4\xb9\xf9\xa9\xef\xa6\xd3\xd3\x00\x76\x1c\xf8\xdc\xd1\x22\x4d\x7e\xc5\xd3\x68\x32\x8f\xa2\x73\xcd\x94\x26\x09\x12\x84\x5e\xac\xe5\xbe\xfc\x2a\xbc\xb4\xdc\x49\x03\x0b\x5c\x69\x42\x48\xf3\x47\x24\x03\x3a\xbf\x3c\xc9\x4a\x13\xa0\x8a\xd7\x40\xfa\x19\x70\x8b\x71\x61\x10\x36\xa4\x63\x5c\x16\x84\x30\x74\xf2\x36\x70\xe9\x0f\xaf\x7d\x28\xa5\x19\x4f\xe6\x1f\x01\x00\x00\xff\xff\x69\x62\x88\x86\xdc\x01\x00\x00")

func _02_create_table_challengesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_create_table_challengesUpSql,
		"02_create_table_challenges.up.sql",
	)
}

func _02_create_table_challengesUpSql() (*asset, error) {
	bytes, err := _02_create_table_challengesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_create_table_challenges.up.sql", size: 476, mode: os.FileMode(420), modTime: time.Unix(1544535817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_create_table_challengsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xce\x48\xcc\xc9\x49\xcd\x4b\x4f\x2d\xb6\xe6\xe2\x82\x88\x07\x79\xba\xbb\xbb\x06\x29\x94\x14\x65\xa6\xa7\xa7\x16\xc5\x23\x54\xc4\xa7\xa7\xe6\x65\xa6\x28\xf8\xfb\x21\xeb\x02\x04\x00\x00\xff\xff\x91\x0a\xd6\xc5\x4c\x00\x00\x00")

func _02_create_table_challengsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_create_table_challengsDownSql,
		"02_create_table_challengs.down.sql",
	)
}

func _02_create_table_challengsDownSql() (*asset, error) {
	bytes, err := _02_create_table_challengsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_create_table_challengs.down.sql", size: 76, mode: os.FileMode(420), modTime: time.Unix(1544535522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"00_unique_id.down.sql": _00_unique_idDownSql,
	"00_unique_id.up.sql": _00_unique_idUpSql,
	"01_create_table_tracks.down.sql": _01_create_table_tracksDownSql,
	"01_create_table_tracks.up.sql": _01_create_table_tracksUpSql,
	"02_create_table_challenges.up.sql": _02_create_table_challengesUpSql,
	"02_create_table_challengs.down.sql": _02_create_table_challengsDownSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"00_unique_id.down.sql": &bintree{_00_unique_idDownSql, map[string]*bintree{}},
	"00_unique_id.up.sql": &bintree{_00_unique_idUpSql, map[string]*bintree{}},
	"01_create_table_tracks.down.sql": &bintree{_01_create_table_tracksDownSql, map[string]*bintree{}},
	"01_create_table_tracks.up.sql": &bintree{_01_create_table_tracksUpSql, map[string]*bintree{}},
	"02_create_table_challenges.up.sql": &bintree{_02_create_table_challengesUpSql, map[string]*bintree{}},
	"02_create_table_challengs.down.sql": &bintree{_02_create_table_challengsDownSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

